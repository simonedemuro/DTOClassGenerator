using CodeDOM2.Domain;
using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace CodeDOM2.CodeGen
{
    public class CodeGenerator<T>
    {
        CodeGenSupport genSupport;

        public CodeGenerator()
        {
            genSupport = new CodeGenSupport();
        }

        public string AutogenerateDTO(T @object)
        {
            Type t = @object.GetType();
            PropertyInfo[] objProps = t.GetProperties();

            List<ClassPropsDesc> classProps = genSupport.AddPropsToClassPropsObj(objProps);
            CodeCompileUnit compileUnit = GenerateCompileUnit(classProps, t.Name);
            string ClassCode = GetCSharpCode(compileUnit);

            return ClassCode;
        }    

        private CodeCompileUnit GenerateCompileUnit(List<ClassPropsDesc> classDescriptot, string originalClassName)
        {
            CodeCompileUnit compileUnit = new CodeCompileUnit();

            //Namespace
            CodeNamespace @namespace = new CodeNamespace("AutogenCode");
            @namespace.Imports.Add(new CodeNamespaceImport("System"));

            //Class
            CodeTypeDeclaration @class = new CodeTypeDeclaration(genSupport.GetDtoClassName(originalClassName));
            // namespace <-- class
            @namespace.Types.Add(@class);

            //generating properties
            List<CodeMemberField>  properties = genSupport.GenerateProperties(classDescriptot);
            //class <-- properties
            genSupport.AddPropertiesToClass(@class, properties);

            //document <-- namespace 
            compileUnit.Namespaces.Add(@namespace);
            return compileUnit;
        }

        private String GetCSharpCode(CodeCompileUnit compileUnit)
        {
            CodeDomProvider provider = CodeDomProvider.CreateProvider("CSharp");
            StringWriter stringWriter = new StringWriter();
            CodeGeneratorOptions CodeOptions = new CodeGeneratorOptions();

            provider.GenerateCodeFromCompileUnit(compileUnit, stringWriter, CodeOptions);

            stringWriter.Close();
            return stringWriter.ToString();
        }

        
    }
}
